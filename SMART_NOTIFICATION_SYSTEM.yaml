# Smart Apple Store Notification System
# Add these to your Home Assistant configuration

# 1. First, add input boolean to control unavailable notifications
# Add to configuration.yaml:
input_boolean:
  apple_notify_unavailable:
    name: "Notify on Unavailable Stock"
    initial: true
    icon: mdi:bell-outline

# 2. Add counter to track consecutive unavailable checks
# Add to configuration.yaml:
counter:
  apple_unavailable_count:
    name: "Consecutive Unavailable Checks"
    initial: 0
    step: 1
    icon: mdi:counter

# 3. Add automations to automations.yaml:

# ALWAYS notify when stock is AVAILABLE (high priority)
- id: apple_stock_available_notification
  alias: "🎉 Apple Stock AVAILABLE Alert"
  description: "Always notify when stock is found - cannot be disabled"
  trigger:
    - platform: state
      entity_id: binary_sensor.apple_store_stock_available
      to: "on"
  action:
    # Reset unavailable counter when stock found
    - service: counter.reset
      target:
        entity_id: counter.apple_unavailable_count
    
    # Send high priority notification
    - service: notify.mobile_app_your_phone_name  # Replace with your phone
      data:
        title: "🎉 iPhone AVAILABLE!"
        message: >
          {% set items = state_attr('sensor.apple_store_stock_available', 'available_items') %}
          {% set stores = state_attr('sensor.apple_store_stock_available', 'monitoring_stores') %}
          {% set products = state_attr('sensor.apple_store_stock_available', 'monitoring_products') %}
          
          📱 STOCK FOUND: {{ states('sensor.apple_store_stock_available') }} items
          
          {% for item in items %}
          • {{ item.product }} at {{ item.store }}
          {% endfor %}
          
          🏪 Monitoring: {{ stores | join(', ') }}
          ⏰ {{ states('sensor.apple_store_last_check') }}
        data:
          priority: high
          ttl: 0
          actions:
            - action: "disable_unavailable_notifications"
              title: "🔕 Disable Unavailable Alerts"
            - action: "open_apple_store"
              title: "🍎 Open Apple Store"

# Notify on UNAVAILABLE (controllable + smart frequency)
- id: apple_stock_unavailable_notification
  alias: "✅ Apple Stock Check Complete (Unavailable)"
  description: "Notify when no stock found - can be disabled"
  trigger:
    - platform: state
      entity_id: sensor.apple_store_last_check
  condition:
    # Only if unavailable notifications are enabled
    - condition: state
      entity_id: input_boolean.apple_notify_unavailable
      state: "on"
    # Only if no stock available
    - condition: state
      entity_id: binary_sensor.apple_store_stock_available
      state: "off"
    # Only if sensor has valid value
    - condition: template
      value_template: "{{ trigger.to_state.state not in ['unavailable', 'unknown', 'none'] }}"
  action:
    # Increment unavailable counter
    - service: counter.increment
      target:
        entity_id: counter.apple_unavailable_count
    
    # Send notification with smart frequency
    - service: notify.mobile_app_your_phone_name
      data:
        title: "✅ Apple Store Check #{{ states('counter.apple_unavailable_count') }}"
        message: >
          {% set stores = state_attr('sensor.apple_store_stock_available', 'monitoring_stores') %}
          {% set products = state_attr('sensor.apple_store_stock_available', 'monitoring_products') %}
          
          No stock found
          
          🏪 Stores: {{ stores | join(', ') }}
          📱 Models: {{ products | length }} iPhone variants
          ⏰ {{ states('sensor.apple_store_last_check') }}
          
          Checked {{ states('counter.apple_unavailable_count') }} times since last stock
        data:
          priority: normal
          ttl: 300
          actions:
            - action: "disable_unavailable_notifications"
              title: "🔕 Stop Unavailable Alerts"

# Handle notification actions
- id: handle_notification_actions
  alias: "Handle Apple Notification Actions"
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "disable_unavailable_notifications"
  action:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.apple_notify_unavailable
    - service: notify.mobile_app_your_phone_name
      data:
        title: "🔕 Unavailable Notifications Disabled"
        message: "You'll only receive alerts when stock is AVAILABLE. Re-enable in Home Assistant if needed."

# SMS Version (if you prefer SMS over mobile app)
- id: apple_stock_sms_available
  alias: "🎉 Apple Stock SMS - AVAILABLE"
  trigger:
    - platform: state
      entity_id: binary_sensor.apple_store_stock_available
      to: "on"
  action:
    - service: notify.sms_notification  # Configure this in configuration.yaml
      data:
        message: >
          🍎 IPHONE AVAILABLE!
          
          {% set items = state_attr('sensor.apple_store_stock_available', 'available_items') %}
          {% for item in items %}
          {{ item.product }} at {{ item.store }}
          {% endfor %}
          
          Check Apple Store app now!

- id: apple_stock_sms_unavailable
  alias: "✅ Apple Stock SMS - Check Complete"
  trigger:
    - platform: state
      entity_id: sensor.apple_store_last_check
  condition:
    - condition: state
      entity_id: input_boolean.apple_notify_unavailable
      state: "on"
    - condition: state
      entity_id: binary_sensor.apple_store_stock_available
      state: "off"
  action:
    - service: notify.sms_notification
      data:
        message: >
          Apple Check #{{ states('counter.apple_unavailable_count') }}: No stock
          {% set stores = state_attr('sensor.apple_store_stock_available', 'monitoring_stores') %}
          Stores: {{ stores | join(', ') }}
          {{ now().strftime('%H:%M') }}